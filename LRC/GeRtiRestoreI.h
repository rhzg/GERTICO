// -*- C++ -*-
//
// $Id: GeRtiRestoreI.h,v 1.19 2009/05/07 12:37:35 mul Exp $

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:922

#ifndef GeRtiRestoreI_H_
#define GeRtiRestoreI_H_

#include "idl/GeRtiFactoryS.h"
#include "GeRtiTime/TimeService.h"
#include "LRC/ReceiverLRC.h"
#include "Util/GeRtiOrb.h"
#include "EventMarket.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
#pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

namespace GERTICO
{
  class SubscribeInteractionJob : public virtual GERTICO::Job
  {
    GeRtiFactory::GeRtiHandle federate;
    GeRtiFactory::GeRtiHandle interaction;
    GERTICO::EventMarket &eventMarket;
    GERTICO::HandleSet regions;
    GERTICO::ReceiverLRC &receiverLRC;
    bool active;
    bool withRegions;

  public:
    SubscribeInteractionJob(GeRtiFactory::GeRtiHandle const &theInteraction, bool const &theActive, GERTICO::HandleSet const &theRegions, GeRtiFactory::GeRtiHandle const &theFederate, GERTICO::EventMarket &theEventMarket, bool const &theWithRegions, GERTICO::ReceiverLRC &theReceiverLRC);
    virtual ~SubscribeInteractionJob(void);

    JobStatus execute(void);
  };

  class SubscribeObjectClassJob : public virtual GERTICO::Job
  {
    GeRtiFactory::GeRtiHandle federate;
    GeRtiFactory::GeRtiHandle objectClass;
    GERTICO::HandleSetMap attRegMap;
    GERTICO::EventMarket &eventMarket;
    GERTICO::ReceiverLRC &receiverLRC;
    bool active;

  public:
    SubscribeObjectClassJob(const GeRtiFactory::GeRtiHandle &theObjectClass, const bool &theActive, GERTICO::HandleSetMap &theAttRegMap, const GeRtiFactory::GeRtiHandle &theFederate, GERTICO::EventMarket &theEventMarket, GERTICO::ReceiverLRC &theReceiverLRC);
    virtual ~SubscribeObjectClassJob(void);

    JobStatus execute(void);
  };

//Class GeRtiFactory_GeRtiRestore_i
class  GeRtiFactory_GeRtiRestore_i : public virtual POA_GeRtiFactory::GeRtiRestore
{
  GERTICO::EventMarket &eventMarket;
  GERTICO::HandleSet &interactionHandleSet;
  PortableServer::POA_var myPOA;
  GeRtiFactory::GeRtiHandle federateId;
  GERTICO::TimeManagementLRC *timeManagementLRC;
  GERTICO::ReceiverLRC &receiverLRC;
  XercesDOMParser *parser;

  // Save.
  static std::string actualLookaheadStr;
  static std::string flushQueueRequestFlagStr;
  static std::string idStr;
  static std::string idleFlagStr;
  static std::string logicalTimeStr;
  static std::string nextEventFlagStr;
  static std::string nextEventAvailableFlagStr;
  static std::string oldLogicalTimeStr;
  static std::string requestedLookaheadStr;
  static std::string timeAdvanceFlagStr;
  static std::string timeAdvanceAvailableFlagStr;
  static std::string timeAdvancingStateStr;
  static std::string timeConstrainedStr;
  static std::string timeManagementStr;
  static std::string timeRegulationStr;
  static std::string timeRequestedStr;
  static std::string timeServiceFlagStr;

  void initializeParser(void);
  void mapIt (GERTICO::HandleSet &theAttributeSet, const GeRtiFactory::Handles &theAttributes);

public:

  static std::string federationTimeStr;

  //Constructor
  GeRtiFactory_GeRtiRestore_i(PortableServer::POA_ptr thePOA, GERTICO::EventMarket &theEventMarket, GERTICO::ReceiverLRC &theReceiverLRC, GERTICO::HandleSet &theInteractionHandleSet);

  //Destructor
  virtual ~GeRtiFactory_GeRtiRestore_i (void);

  // Local Methods.
  PortableServer::POA_ptr _default_POA (void);
  void setTimeService(GERTICO::TimeManagementLRC *theTimeManagementLRC);

  // CORBA Methods.
virtual void resetLRC (void)
  throw (
    CORBA::SystemException
  );

virtual void setLRCFederate (
    GeRtiFactory::GeRtiHandle theFederateId)
  throw (
    CORBA::SystemException
  );

virtual void publishInteractionClass (
    GeRtiFactory::GeRtiHandle theInteraction)
  throw (
    CORBA::SystemException,
    GeRtiFactory::InteractionClassNotDefined,
    GeRtiFactory::RTIinternalError
  );

virtual void publishObjectClass (
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::Handles & attributeList
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RTIinternalError
  );

virtual void subscribeInteractionClass (
    GeRtiFactory::GeRtiHandle theClass,
    CORBA::Boolean active
  )
  throw (
    GeRtiFactory::InteractionClassNotDefined,
    GeRtiFactory::RTIinternalError);

virtual void subscribeInteractionClassWithRegion (
    GeRtiFactory::GeRtiHandle theClass,
    CORBA::Boolean active,
    GeRtiFactory::GeRtiHandle theRegion
  )
  throw (
    GeRtiFactory::InteractionClassNotDefined,
    GeRtiFactory::RegionNotKnown,
    GeRtiFactory::RTIinternalError);

virtual void subscribeObjectClassAttributes (
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::Handles & attributeList,
    CORBA::Boolean active
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RTIinternalError
  );

virtual void subscribeObjectClassAttributesWithRegion (
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::Handles & attributeList,
    CORBA::Boolean active,
    GeRtiFactory::GeRtiHandle theRegion
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RegionNotKnown,
    GeRtiFactory::InvalidRegionContext,
    GeRtiFactory::RTIinternalError
  );

virtual void loadObject (
    GeRtiFactory::GeRtiHandle theObjectId,
    const CORBA::WChar *theObjectName,
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::AttributesData &theAttributesData
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RegionNotKnown,
    GeRtiFactory::InvalidRegionContext,
    GeRtiFactory::RTIinternalError
  );

virtual void loadRegion (
      GeRtiFactory::GeRtiHandle theSpace,
      GeRtiFactory::GeRtiHandle theRegion,
      const GeRtiFactory::Extents & theExtents
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::RTIinternalError
  );

virtual void loadLRC (
    const char * restoreData
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::RTIinternalError
  );
};
}

#endif /* GeRtiRestoreI_H_  */
