/*******************************************************************************
**
** Copyright (c) Fraunhofer IITB
** All rights reserved.
**
********************************************************************************
**

$Author: mul $
$Name $
$Log: GeRtiAmbassadorI.cpp,v $
Revision 1.48  2010/07/22 11:18:17  mul
Changes to logging.

Revision 1.47  2010/05/17 08:08:03  mul
Add logical time interval.

Revision 1.46  2010/03/16 15:30:41  mul
Add gal events for time management.

Revision 1.45  2010/03/05 13:19:38  mul
Changes for single evoke call.

Revision 1.44  2009/09/03 07:19:13  mul
Add intermediate time advance grant

Revision 1.43  2009/06/12 12:47:05  mul
Minor changes.

Revision 1.42  2009/05/07 12:39:00  mul
Changes for removing token logic in time management.

Revision 1.41  2009/03/19 09:25:30  mul
Changes to limit output of event logging.

Revision 1.40  2009/02/16 15:12:04  mul
Changes for integrating ownership.

Revision 1.39  2009/01/26 10:09:06  mul
Changes to detect crashed federate.

Revision 1.38  2008/11/19 14:12:13  mul
Changes for logging.

Revision 1.37  2008/04/29 11:50:25  mul
Changed some logging.

Revision 1.36  2008/03/06 10:24:56  mul
Add debugging.

Revision 1.35  2007/09/06 06:32:46  mul
Changes for ieee1516.

Revision 1.34  2007/06/26 08:32:04  mul
Changes for ieee1516.

Revision 1.33  2007/05/15 13:28:54  mul
Changes for combined 1.3 and 1516 logic.

Revision 1.32  2007/05/09 13:19:16  mul
Use generic time.

Revision 1.31  2007/03/12 13:23:54  mul
Changed string to wstring.

Revision 1.30  2007/03/06 09:30:16  mul
Changes for ieee conversion.

Revision 1.29  2007/02/08 10:17:08  mul
Change event names.

Revision 1.28  2007/01/12 14:53:38  mul
Make call of get mom data more robust.

Revision 1.27  2006/09/19 07:59:08  mul
Fix some program structure problems.

Revision 1.26  2006/08/30 11:45:58  mul
Changes for phase 1 testcases.

Revision 1.25  2006/08/01 11:39:58  mul
Changes for mom.

Revision 1.24  2006/07/03 13:47:42  mul
Fix logic for turn on/off.

Revision 1.23  2006/04/19 15:07:59  mul
Changes for MOM.

Revision 1.22  2005/12/20 09:19:32  mul
Separate child poa from singleton.

Revision 1.21  2005/09/07 12:36:25  mul
Change name scoping. Remove some calls to name service.

Revision 1.20  2005/04/08 13:05:30  mul
Remove unwanted function.

Revision 1.19  2004/12/14 13:34:58  mul
Fix save logic.

Revision 1.18  2004/10/04 15:17:50  mul
Minor changes.

Revision 1.17  2004/09/24 11:05:07  mul
Minor changes.

Revision 1.16  2004/09/24 08:36:19  mul
Changes for save federation.

Revision 1.15  2004/08/19 09:55:36  mul
Changes for save/restore logic.

Revision 1.14  2004/05/27 12:29:02  mul
Fix problems found in conformance test.

Revision 1.13  2004/03/17 14:03:48  mul
Add remaining services.

Revision 1.12  2003/10/13 07:31:11  mul
New ORB init logic.

Revision 1.11  2003/10/07 07:49:36  hzg
GeRtiFactory::RTIinternalError with reason string

Revision 1.10  2003/10/06 07:39:01  mul
Check for null default child poa.

Revision 1.9  2003/08/14 15:21:04  mul
Use a child POA for gertico objects.

Revision 1.8  2003/08/13 12:17:46  hzg
Windows port

Revision 1.7  2003/08/07 12:28:30  mul
Fix synchronization point registration.

Revision 1.6  2003/07/15 15:16:15  mul
Changes for RTI::FedTime.

Revision 1.5  2003/05/28 07:38:55  mul
Removed NotSaved and NotRestored methods.

Revision 1.4  2003/05/21 11:59:20  hzg
Debug.h removed

Revision 1.3  2003/04/10 12:20:44  mul
Add save/restore federation.

Revision 1.2  2002/07/16 08:57:22  hzg
Copyright Hinweis und Versiondaten in Dateien aufgenommen


**
*******************************************************************************/


/* -*- C++ -*- $Id: GeRtiAmbassadorI.cpp,v 1.48 2010/07/22 11:18:17 mul Exp $ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#include <string>

#include "GeRtiAmbassadorI.h"
#include "Util/GeRtiOrb.h"
#include "Util/Mapper.h"

/********************************** Gal begin ***************************************/

#ifdef GalDebug

#include "Gal/StdAfx.h"
#include "Gal/repository.h"
#include "Gal/event.h"

static class Repository_l *FM=(Repository::getSingleInstance())->getRepository_l("GeRtiFM.res","GeRtiFM");

static class Event *GeRti_FM_feds_i=FM->getRefEvent("GeRti_FM_feds_i");
static class Event *GeRti_FM_d=FM->getRefEvent("GeRti_FM_d");
static class Event *GeRti_FM_e=FM->getRefEvent("GeRti_FM_e");
static class Event *GeRti_FM_i=FM->getRefEvent("GeRti_FM_i");
static class Event *GeRti_FM_w=FM->getRefEvent("GeRti_FM_w");

static class Repository_l *OM=(Repository::getSingleInstance())->getRepository_l("GeRtiOM.res","GeRtiOM");

static class Event *GeRti_OM_d=OM->getRefEvent("GeRti_OM_d");
static class Event *GeRti_OM_e=OM->getRefEvent("GeRti_OM_e");
static class Event *GeRti_OM_i=OM->getRefEvent("GeRti_OM_i");
static class Event *GeRti_OM_w=OM->getRefEvent("GeRti_OM_w");

static class Repository_l *OWM=(Repository::getSingleInstance())->getRepository_l("GeRtiOWM.res","GeRtiOWM");

static class Event *GeRti_OWM_d=OWM->getRefEvent("GeRti_OWM_d");
static class Event *GeRti_OWM_e=OWM->getRefEvent("GeRti_OWM_e");
static class Event *GeRti_OWM_i=OWM->getRefEvent("GeRti_OWM_i");
static class Event *GeRti_OWM_w=OWM->getRefEvent("GeRti_OWM_w");

#endif

/********************************** Gal end ***************************************/

// ---------------------------------------------------------------------------
// Implementation skeleton constructor
// ---------------------------------------------------------------------------
GERTICO::GeRtiFactory_FederateAmbassador_i::GeRtiFactory_FederateAmbassador_i(PortableServer::POA_ptr thePOA, GERTICO::RegisteredObjectsHolder &theRegisteredObjectsHolder, GERTICO::GeRtiFedTimeFactory &theGeRtiFedTimeFactory) : geRtiFedTimeFactory(theGeRtiFedTimeFactory), registeredObjectsHolder(theRegisteredObjectsHolder)
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "GeRtiFactory_FederateAmbassador_i", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  myPOA = PortableServer::POA::_duplicate(thePOA);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "GeRtiFactory_FederateAmbassador_i", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
// Implementation skeleton destructor
// ---------------------------------------------------------------------------
GERTICO::GeRtiFactory_FederateAmbassador_i::~GeRtiFactory_FederateAmbassador_i (void)
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "~GeRtiFactory_FederateAmbassador_i", "EnterAndLeave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
PortableServer::POA_ptr GERTICO::GeRtiFactory_FederateAmbassador_i::_default_POA (void)
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "GeRtiFactory_FederateAmbassador_i::_default_POA", "EnterAndLeave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  return PortableServer::POA::_duplicate(myPOA);
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i:: setReceiver (GERTICO::ReceiverLRC *theReceiverLRC)
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "GeRtiFactory_FederateAmbassador_i:: setReceiver", "EnterAndLeave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  receiverLRC = theReceiverLRC;
}

////////////////////////////////////
// Federation Management Services //
////////////////////////////////////
void GERTICO::GeRtiFactory_FederateAmbassador_i::announceSynchronizationPoint (
    const CORBA::WChar *label,
    const GeRtiFactory::UserSuppliedTag & tag
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              sprintf(galMsg,"announceSynchronizationPoint(label=%ls)", label);
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printUserSuppliedTag("tag=", galMsg, tag);
                              E2(GeRti_FM_i, "announceSynchronizationPoint", galMsg);
                            }
                           #endif   // inserted by Gal converter
  std::wstring l;

  GERTICO::Mapper::mapWstringFromWchar(l, label);

  receiverLRC->addAnnounceSynchronizationPoint(l, tag);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "announceSynchronizationPoint", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::ping (
        void)
    throw (
      CORBA::SystemException
    )
{
//  std::cout << "Call ping" << std::endl;
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::confirmSynchronizationPointRegistration (
    const CORBA::WChar *label,
    CORBA::Boolean success,
    GeRtiFactory::SynchronizationPointFailureReason reason
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              if (success)
                              {
                                sprintf(galMsg,"confirmSynchronizationPointRegistration(label=%ls,success=true)", label);
                              }
                              else
                              {
                                sprintf(galMsg,"confirmSynchronizationPointRegistration(label=%ls,success=false,reason=)", label);
                              }
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  std::wstring l;

  GERTICO::Mapper::mapWstringFromWchar(l, label);

  if (success)
  {
    receiverLRC->addConfirmSynchronizationPointRegistration (l, true, reason);
  }
  else
  {
    receiverLRC->addConfirmSynchronizationPointRegistration (l, false, reason);
  }
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "confirmSynchronizationPointRegistration", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::federationSynchronized (
    const CORBA::WChar *label
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              sprintf(galMsg,"federationSynchronized(label=%ls)", label);
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  std::wstring l;

  GERTICO::Mapper::mapWstringFromWchar(l, label);

  receiverLRC->addFederationSynchronized(l);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationSynchronized", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::initiateFederateSave (
    const CORBA::WChar *label
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::UnableToPerformSave,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              sprintf(galMsg,"initiateFederateSave(label=%ls)", label);
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  std::wstring l;

  GERTICO::Mapper::mapWstringFromWchar(l, label);
  receiverLRC->addInitiateFederateSave(l);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "initiateFederateSave", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::initiateFederateSaveWithTime(
    const CORBA::WChar *label,
    const GeRtiFactory::Time &theTime
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::UnableToPerformSave,
    GeRtiFactory::InvalidFederationTime,
    GeRtiFactory::FederateInternalError
  )
{
  std::auto_ptr<GERTICO::GeRtiFedTime> t;
  std::wstring l;
  char buff[1024];
  GERTICO::ConvertTime::mapGeRtiFedTimeAutoPtr(geRtiFedTimeFactory, t, theTime);
  t->getPrintableString(buff);
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              sprintf(galMsg,"initiateFederateSaveWithTime(label=%ls)", label);
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  GERTICO::Mapper::mapWstringFromWchar(l, label);

  receiverLRC->addInitiateFederateSaveWithTime(l, *t);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "initiateFederateSaveWithTime", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::federationSaved (
    CORBA::Boolean success,
    GeRtiFactory::SaveFailureReason failureReason
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              if (success)
                              {
                                sprintf(galMsg,"federationSaved(success=true)");
                              }
                              else
                              {
                                sprintf(galMsg,"federationSaved(success=false,failureReason=)");
                              }
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  bool b;

  if (success)
  {
    b = true;
  }
  else
  {
    b = false;
  }

  receiverLRC->addFederationSaved(b, failureReason);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationSaved", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::federationSaveStatusResponse (
    const GeRtiFactory::SaveStatusPairSeq & theFederateStatusVector
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationSaveStatusResponse", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  receiverLRC->addFederationSaveStatusResponse(theFederateStatusVector);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationSaveStatusResponse", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::confirmFederationRestorationRequest (
    const CORBA::WChar *label,
    CORBA::Boolean reason
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              if (reason)
                              {
                                sprintf(galMsg,"confirmFederationRestorationRequest(label=%ls,reason=true)", label);
                              }
                              else
                              {
                                sprintf(galMsg,"confirmFederationRestorationRequest(label=%ls,reason=false)", label);
                              }
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  std::wstring l;

  GERTICO::Mapper::mapWstringFromWchar(l, label);

  bool b;
  if (reason)
  {
    b = true;
  }
  else
  {
    b = false;
  }

  receiverLRC->addConfirmFederationRestorationRequest(l, b);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "confirmFederationRestorationRequest", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::federationRestoreBegun (
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationRestoreBegun", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  receiverLRC->addFederationRestoreBegun ();
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationRestoreBegun", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::initiateFederateRestore (
    const CORBA::WChar *label,
    GeRtiFactory::GeRtiHandle handle
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::SpecifiedSaveLabelDoesNotExist,
    GeRtiFactory::CouldNotRestore,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = handle;
                              sprintf(galMsg,"initiateFederateRestore(label=%ls,handle=%lu)", label, ul);
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  std::wstring l;

  GERTICO::Mapper::mapWstringFromWchar(l, label);
  receiverLRC->addInitiateFederateRestore (l, handle);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "initiateFederateRestore", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::federationRestored (
    CORBA::Boolean success,
    GeRtiFactory::RestoreFailureReason failureReason
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_i)
                            {
                              char galMsg[512];

                              if (success)
                              {
                                sprintf(galMsg,"federationRestored(success=true,failureReason=)");
                              }
                              else
                              {
                                sprintf(galMsg,"federationRestored(success=false,failureReason=)");
                              }
                              E1mEnd(GeRti_FM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  bool b;

  if (success)
  {
    b = true;
  }
  else
  {
    b = false;
  }

  receiverLRC->addFederationRestored(b, failureReason);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationRestored", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::federationRestoreStatusResponse (
    const GeRtiFactory::RestoreStatusPairSeq & theFederateStatusVector
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationRestoreStatusResponse", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  receiverLRC->addFederationRestoreStatusResponse(theFederateStatusVector);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_i, "federationRestoreStatusResponse", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

////////////////////////////////
// Object Management Services //
////////////////////////////////

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::objectInstanceNameReservationSucceeded (
    const CORBA::WChar * theObjectInstanceName
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::UnknownName,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];

                              sprintf(galMsg,"objectInstanceNameReservationSucceeded(objectInstanceName=%ls)", theObjectInstanceName);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->addObjectInstanceNameReservationSucceeded(theObjectInstanceName);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "objectInstanceNameReservationSucceeded", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::objectInstanceNameReservationFailed (
    const CORBA::WChar * theObjectInstanceName
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::UnknownName,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];

                              sprintf(galMsg,"objectInstanceNameReservationFailed(objectInstanceName=%ls)", theObjectInstanceName);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->addObjectInstanceNameReservationFailed(theObjectInstanceName);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "objectInstanceNameReservationFailed", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::announceObjectInstance
(
    GeRtiFactory::GeRtiHandle theObject,
    GeRtiFactory::GeRtiHandle theObjectClass,
    const GeRtiFactory::Handles &theAttributes,
    const CORBA::WChar *theObjectName
)
throw
(
    CORBA::SystemException,
    GeRtiFactory::CouldNotDiscover,
    GeRtiFactory::ObjectClassNotKnown,
    GeRtiFactory::FederateInternalError
)
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;
                              unsigned long ul1;

                              ul = theObject;
                              ul1 = theObjectClass;
                              sprintf(galMsg,"discoverObjectInstance(object=%lu,objectClass=%lu,objectName=%ls)", ul, ul1, theObjectName);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  GERTICO::HandleSet attributes;
  std::wstring s;
  GERTICO::Mapper::mapWstringFromWchar(s, theObjectName);
  GERTICO::Mapper::mapHandleSet(attributes, theAttributes);
//  receiverLRC->federateDB->objectManagementLRC->addAnnounce(s, theObject, theObjectClass, attributes);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "discoverObjectInstance", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::discoverObjectInstance
(
    GeRtiFactory::GeRtiHandle theObject,
    GeRtiFactory::GeRtiHandle theObjectClass,
    const CORBA::WChar *theObjectName
)
throw
(
    CORBA::SystemException,
    GeRtiFactory::CouldNotDiscover,
    GeRtiFactory::ObjectClassNotKnown,
    GeRtiFactory::FederateInternalError
)
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;
                              unsigned long ul1;

                              ul = theObject;
                              ul1 = theObjectClass;
                              sprintf(galMsg,"discoverObjectInstance(object=%lu,objectClass=%lu,objectName=%ls)", ul, ul1, theObjectName);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  std::wstring s;
  GERTICO::Mapper::mapWstringFromWchar(s, theObjectName);
  receiverLRC->addDiscover(s, theObject, theObjectClass);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "discoverObjectInstance", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::removeObjectInstance (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::UserSuppliedTag &theTag
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::FederateInternalError
  )

{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"removeObjectInstance(object=%lu)", ul);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printUserSuppliedTag("tag=", galMsg, theTag);
                              E2(GeRti_OM_i, "removeObjectInstance", galMsg);
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->addRemove (theObject, theTag);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "removeObjectInstance", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::attributesInScope (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & theAttributes
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"attributesInScope(object=%lu)", ul);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, theAttributes);
                              E2(GeRti_OM_i, "attributesInScope", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->addAttributesInScope (theObject, theAttributes);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "attributesInScope", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::attributesOutOfScope (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & theAttributes
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"attributesOutOfScope(object=%lu)", ul);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, theAttributes);
                              E2(GeRti_OM_i, "attributesOutOfScope", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->addAttributesOutOfScope (theObject, theAttributes);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "attributesOutOfScope", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::removeObjectInstanceWithTime (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::UserSuppliedTag &theTag,
    const GeRtiFactory::Time &theTime,
    const GeRtiFactory::ERHandle &theERHandle
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::FederateInternalError
  )

{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;
                              unsigned long ul1;
                              unsigned long ul2;

                              ul = theObject;
                              ul1 = theERHandle.sendingFederate;
                              ul2 = theERHandle.theSerialNumber;
                              sprintf(galMsg,"removeObjectInstanceWithTime(object=%lu,sendingFederate=%lu,theSerialNumber=%lu)", ul, ul1, ul2);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printUserSuppliedTag("tag=", galMsg, theTag);
                              E2(GeRti_OM_i, "removeObjectInstanceWithTime", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  if (theTime.length())
  {
    std::auto_ptr<GERTICO::GeRtiFedTime> t;
    GERTICO::ConvertTime::mapGeRtiFedTimeAutoPtr(geRtiFedTimeFactory, t, theTime);
    receiverLRC->addRemoveWithTime (theObject, theTag, t, theERHandle);
  }
  else
  {
    receiverLRC->addRemove (theObject, theTag);
  }
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "removeObjectInstanceWithTime", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::provideAttributeValueUpdate (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & theAttributes,
    const GeRtiFactory::UserSuppliedTag & theTag
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeNotOwned,
    GeRtiFactory::FederateInternalError
  )

{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"provideAttributeValueUpdate(object=%lu)", ul);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, theAttributes);
                              E2(GeRti_OM_i, "provideAttributeValueUpdate", galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printUserSuppliedTag("tag=", galMsg, theTag);
                              E2(GeRti_OM_i, "provideAttributeValueUpdate", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->addProvideAttributeValueUpdate(theObject, theAttributes, theTag);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "provideAttributeValueUpdate", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::turnUpdatesOnForObjectInstance (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::AttributeSubscribersSeq & theAttributeSubscribers
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotOwned,
    GeRtiFactory::FederateInternalError
  )

{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"turnUpdatesOnForObjectInstance(object=%lu)", ul);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
//                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, theAttributes);
//                              E2(GeRti_OM_i, "turnUpdatesOnForObjectInstance", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  GERTICO::HandleSetMap attributeSubscribers;
  GERTICO::Mapper::mapHandleSetMapFromAttributeSubscribersSeq(attributeSubscribers, theAttributeSubscribers);
  receiverLRC->addObjPubOn(theObject, attributeSubscribers);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "turnUpdatesOnForObjectInstance", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::turnUpdatesOffForObjectInstance (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::AttributeSubscribersSeq & theAttributeSubscribers
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotOwned,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OM_i)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"turnUpdatesOffForObjectInstance(object=%lu)", ul);
                              E1mEnd(GeRti_OM_i, galMsg);   // inserted by Gal converter
//                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, theAttributes);
//                              E2(GeRti_OM_i, "turnUpdatesOffForObjectInstance", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  GERTICO::HandleSetMap attributeSubscribers;
  GERTICO::Mapper::mapHandleSetMapFromAttributeSubscribersSeq(attributeSubscribers, theAttributeSubscribers);
  receiverLRC->addObjPubOff(theObject, attributeSubscribers);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_OM_i, "turnUpdatesOffForObjectInstance", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::requestAttributeOwnershipAssumption (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & offeredAttributes,
    const GeRtiFactory::UserSuppliedTag &theTag
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeAlreadyOwned,
    GeRtiFactory::AttributeNotPublished,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::requestAttributeOwnershipAssumption(object=%lu", ul);
                              GERTICO::Mapper::printGeRtiFactoryHandles(",attributes=", &galMsg[strlen(galMsg)], offeredAttributes);
                              GERTICO::Mapper::printUserSuppliedTag(",tag=", &galMsg[strlen(galMsg)], theTag);
                              strcat(galMsg, ") enter");
                              E1(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  receiverLRC->addRequestAttributeOwnershipAssumption (theObject, offeredAttributes, theTag);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::requestAttributeOwnershipAssumption", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::requestDivestitureConfirmation (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & releasedAttributes
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeNotOwned,
    GeRtiFactory::AttributeDivestitureWasNotRequested,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::requestDivestitureConfirmation(object=%lu", ul);
                              GERTICO::Mapper::printGeRtiFactoryHandles(",releasedAttributes=", &galMsg[strlen(galMsg)], releasedAttributes);
                              strcat(galMsg, ") enter");
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  RegisteredObject* obj =  registeredObjectsHolder.getObject(theObject);
  for (unsigned int i=0; i<releasedAttributes.length(); i++)
  {
    AttributeInfo *info;
    try
    {
      info = obj->getAttribute (releasedAttributes[i]);
    }
    catch (GeRtiFactory::AttributeNotDefined ex)
    {
      info = new AttributeInfo();
      obj->addAttribute (releasedAttributes[i], info);
    }
#ifndef IEEE_1516
    info->setStatusUnowned();
#endif
  }
  receiverLRC->addRequestDivestitureConfirmation(theObject, releasedAttributes);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::requestDivestitureConfirmation", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::attributeOwnershipDivestitureNotification (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & releasedAttributes
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeNotOwned,
    GeRtiFactory::AttributeDivestitureWasNotRequested,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::attributeOwnershipDivestitureNotification(object=%lu", ul);
                              GERTICO::Mapper::printGeRtiFactoryHandles(",releasedAttributes=", &galMsg[strlen(galMsg)], releasedAttributes);
                              strcat(galMsg, ") enter");
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  RegisteredObject* obj =  registeredObjectsHolder.getObject(theObject);
  for (unsigned int i=0; i<releasedAttributes.length(); i++)
  {
    AttributeInfo* info = obj->getAttribute (releasedAttributes[i]);
    info->setStatusUnowned();
  }
  receiverLRC->addAttributeOwnershipDivestitureNotification (theObject, releasedAttributes);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::attributeOwnershipDivestitureNotification", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::attributeOwnershipAcquisitionNotification (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & securedAttributes,
    const GeRtiFactory::UserSuppliedTag & theTag
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeAcquisitionWasNotRequested,
    GeRtiFactory::AttributeAlreadyOwned,
    GeRtiFactory::AttributeNotPublished,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::attributeOwnershipAcquisitionNotification(object=%lu", ul);
                              GERTICO::Mapper::printGeRtiFactoryHandles(",securedAttributes=", &galMsg[strlen(galMsg)], securedAttributes);
                              GERTICO::Mapper::printUserSuppliedTag(",tag=", &galMsg[strlen(galMsg)], theTag);
                              strcat(galMsg, ") enter");
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  RegisteredObject* obj;
  obj = registeredObjectsHolder.getObject(theObject);

  for (unsigned int i=0; i<securedAttributes.length(); i++)
  {
    AttributeInfo* info;
    try
    {
      info = obj->getAttribute (securedAttributes[i]);
    }
    catch (GeRtiFactory::AttributeNotDefined ex)
    {
      info = new AttributeInfo();
      obj->addAttribute (securedAttributes[i], info);
    }
    info->setStatusOwned(receiverLRC->federateDB->federate);
  }
  receiverLRC->addAttributeOwnershipAcquisitionNotification(theObject, securedAttributes, theTag);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::attributeOwnershipAcquisitionNotification", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::attributeOwnershipUnavailable (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & theAttributes
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::AttributeAlreadyOwned,
    GeRtiFactory::AttributeAcquisitionWasNotRequested,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::attributeOwnershipUnavailable(object=%lu", ul);
                              GERTICO::Mapper::printGeRtiFactoryHandles(",attributes=", &galMsg[strlen(galMsg)], theAttributes);
                              strcat(galMsg, ") enter");
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  receiverLRC->addAttributeOwnershipUnavailable(theObject, theAttributes);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::attributeOwnershipUnavailable", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::requestAttributeOwnershipRelease (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & candidateAttributes,
    const GeRtiFactory::UserSuppliedTag &theTag
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeNotOwned,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::requestAttributeOwnershipRelease(object=%lu", ul);
                              GERTICO::Mapper::printGeRtiFactoryHandles(",candidateAttributes=", &galMsg[strlen(galMsg)], candidateAttributes);
                              GERTICO::Mapper::printUserSuppliedTag(",tag=", &galMsg[strlen(galMsg)], theTag);
                              strcat(galMsg, ") enter");
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  receiverLRC->addRequestAttributeOwnershipRelease (theObject, candidateAttributes, theTag);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::requestAttributeOwnershipRelease", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::confirmAttributeOwnershipAcquisitionCancellation (
    GeRtiFactory::GeRtiHandle theObject,
    const GeRtiFactory::Handles & theAttributes
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::AttributeAlreadyOwned,
    GeRtiFactory::AttributeAcquisitionWasNotCanceled,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theObject;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::confirmAttributeOwnershipAcquisitionCancellation(object=%lu", ul);
                              GERTICO::Mapper::printGeRtiFactoryHandles(",attributes=", &galMsg[strlen(galMsg)], theAttributes);
                              strcat(galMsg, ") enter");
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  receiverLRC->addConfirmAttributeOwnershipAcquisitionCancellation (theObject, theAttributes);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::confirmAttributeOwnershipAcquisitionCancellation", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::informAttributeOwnership (
    GeRtiFactory::GeRtiHandle theObject,
    GeRtiFactory::GeRtiHandle theAttribute,
    GeRtiFactory::GeRtiHandle theOwner
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;
                              unsigned long ul1;
                              unsigned long ul2;

                              ul = theObject;
                              ul1 = theAttribute;
                              ul2 = theOwner;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::informAttributeOwnership(object=%lu,attribute=%lu,owner=%lu) enter", ul, ul1, ul2);
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  RegisteredObject* obj;
  obj = registeredObjectsHolder.getObject(theObject);

  AttributeInfo* info;
  try
  {
    info = obj->getAttribute (theAttribute);
  }
  catch(GeRtiFactory::AttributeNotDefined &)
  {
    info = new AttributeInfo();
    obj->addAttribute (theAttribute, info);
  }
  info->setStatusOwned(theOwner);

  receiverLRC->addInformAttributeOwnership(theObject, theAttribute, theOwner);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::informAttributeOwnership", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::attributeIsNotOwned (
    GeRtiFactory::GeRtiHandle theObject,
    GeRtiFactory::GeRtiHandle theAttribute
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;
                              unsigned long ul1;

                              ul = theObject;
                              ul1 = theAttribute;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::attributeIsNotOwned(object=%lu,attribute=%lu) enter", ul, ul1);
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  receiverLRC->addAttributeIsNotOwned(theObject, theAttribute);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::attributeIsNotOwned", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::attributeOwnedByRTI (
    GeRtiFactory::GeRtiHandle theObject,
    GeRtiFactory::GeRtiHandle theAttribute
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectNotKnown,
    GeRtiFactory::AttributeNotKnown,
    GeRtiFactory::FederateInternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_OWM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;
                              unsigned long ul1;

                              ul = theObject;
                              ul1 = theAttribute;
                              sprintf(galMsg,"GeRtiFactory_FederateAmbassador_i::attributeOwnedByRTI(object=%lu,attribute=%lu) enter", ul, ul1);
                              E1mEnd(GeRti_OWM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  receiverLRC->addAttributeOwnedByRTI(theObject, theAttribute);

                           #ifdef GalDebug   // inserted by Gal converter
                              E2(GeRti_OWM_d, "GeRtiFactory_FederateAmbassador_i::attributeOwnedByRTI", "leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::doMomRequest(
      GeRtiFactory::GeRtiHandle theRequest,
      const GeRtiFactory::HandleValues & data
    )
    throw(
      CORBA::SystemException
    )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              char galMsg[512];
                              unsigned int indItem;
                              unsigned long lenItems;
                              unsigned long ul;

                              ul = theRequest;
                              sprintf(galMsg,"doMomRequest(request=%lu)", ul);
                              E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              lenItems = data.length();
                              for (indItem = 0; indItem < lenItems; indItem++)
                              {
                                GERTICO::Mapper::printAttributeHandleValue("data=", galMsg, data[indItem]);
                                E2(GeRti_FM_d, "doMomRequest", galMsg);   // inserted by Gal converter
                              }
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->doMomRequest(theRequest, data);
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "doMomRequest", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_FederateAmbassador_i::getMomData(
      GeRtiFactory::GeRtiHandle theRequest,
      const GeRtiFactory::Handles & theAttributes,
      GeRtiFactory::HandleValues_out data
    )
    throw(
      CORBA::SystemException
    )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              char galMsg[512];
                              unsigned long ul;

                              ul = theRequest;
                              sprintf(galMsg,"getMomData(request=%lu)", ul);
                              E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, theAttributes);
                              E2(GeRti_FM_d, "getMomData", galMsg);   // inserted by Gal converter
// Data conversion problem:
//                              GERTICO::Mapper::printAttributeHandleValue("data=", galMsg, data);
//                              E2(GeRti_FM_d, "getMomData", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
  receiverLRC->federateDB->ps->acquire();
  receiverLRC->federateDB->ps->release();

  data = new GeRtiFactory::HandleValues();
  try
  {
    receiverLRC->getMomData(theRequest, theAttributes, data);
  }
  catch(...)
  {
  }
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "getMomData", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}
