// -*- C++ -*-
//
// $Id: GeRtiRestoreI.cpp,v 1.28 2009/05/07 12:37:35 mul Exp $

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:985

#include "GeRtiRestoreI.h"
#include "Util/Mapper.h"
#include <xercesc/framework/MemBufInputSource.hpp>

/********************************* Gal begin *********************************/   // inserted by Gal converter
   // inserted by Gal converter
// Version: 1.1   // inserted by Gal converter
// Date/Time: Tue May 13 10:30:03 2003   // inserted by Gal converter
   // inserted by Gal converter
#ifdef GalDebug   // inserted by Gal converter
#include "Gal/StdAfx.h"   // inserted by Gal converter
#include "Gal/repository_l.h"   // inserted by Gal converter
#include "Gal/event.h"   // inserted by Gal converter
//#include <strstream.h>   // inserted by Gal converter
   // inserted by Gal converter
//static char GalBuffer[256];   // inserted by Gal converter
//static class ostrstream GalOs(GalBuffer,256);   // inserted by Gal converter
   // inserted by Gal converter
static class Repository_l *FM=(Repository::getSingleInstance())->getRepository_l("GeRtiFM.res","GeRtiFM");

static class Event *GeRti_FM_d=FM->getRefEvent("GeRti_FM_d");
static class Event *GeRti_FM_e=FM->getRefEvent("GeRti_FM_e");
static class Event *GeRti_FM_feds_i=FM->getRefEvent("GeRti_FM_feds_i");
static class Event *GeRti_FM_i=FM->getRefEvent("GeRti_FM_i");
static class Event *GeRti_FM_save_restore_i=FM->getRefEvent("GeRti_FM_save_restore_i");
static class Event *GeRti_FM_sync_i=FM->getRefEvent("GeRti_FM_sync_i");
static class Event *GeRti_FM_w=FM->getRefEvent("GeRti_FM_w");

   // inserted by Gal converter
#endif   // inserted by Gal converter
   // inserted by Gal converter
/*********************************** Gal end *********************************/   // inserted by Gal converter

static char galMsg[512];

// Static strings for save/restore.
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::actualLookaheadStr("actualLookahead");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::federationTimeStr("federationTime");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::flushQueueRequestFlagStr("flushQueueRequestFlag");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::idStr("id");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::idleFlagStr("idleFlag");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::logicalTimeStr("logicalTime");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::nextEventFlagStr("nextEventFlag");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::nextEventAvailableFlagStr("nextEventAvailableFlag");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::oldLogicalTimeStr("oldLogicalTime");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::requestedLookaheadStr("requestedLookahead");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeAdvanceFlagStr("timeAdvanceFlag");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeAdvanceAvailableFlagStr("timeAdvanceAvailableFlag");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeAdvancingStateStr("timeAdvancingState");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeConstrainedStr("timeConstrained");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeManagementStr("timeManagement");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeRegulationStr("timeRegulation");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeRequestedStr("timeRequested");
std::string GERTICO::GeRtiFactory_GeRtiRestore_i::timeServiceFlagStr("timeServiceFlag");

// ---------------------------------------------------------------------------
//  Local data
//
//  gOutputEncoding
//      The encoding we are to output in. If not set on the command line,
//      then it is defaults to the encoding of the input XML file.
//
//  gMyEOLSequence
//      The end of line sequence we are to output.
//
//  gSplitCdataSections
//      Indicates whether split-cdata-sections is to be enabled or not.
//
//  gDiscardDefaultContent
//      Indicates whether default content is discarded or not.
//
//  gUseFilter
//      Indicates if user wants to plug in the PrintFilter.
//
//  gValScheme
//      Indicates what validation scheme to use. It defaults to 'auto', but
//      can be set via the -v= command.
//
// ---------------------------------------------------------------------------

static char*                    goutputfile            = 0;
// options for DOMWriter's features
static XMLCh*             gOutputEncoding        = 0;
static XMLCh*             gMyEOLSequence         = 0;

static bool                     gSplitCdataSections    = true;
static bool                     gDiscardDefaultContent = true;
static bool                     gUseFilter             = false;
static bool                     gFormatPrettyPrint     = false;
static bool                     gWriteBOM              = false;

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::SubscribeInteractionJob::SubscribeInteractionJob(GeRtiFactory::GeRtiHandle const &theInteraction, bool const &theActive, GERTICO::HandleSet const &theRegions, GeRtiFactory::GeRtiHandle const &theFederate, GERTICO::EventMarket &theEventMarket, bool const &theWithRegions, GERTICO::ReceiverLRC &theReceiverLRC) : eventMarket(theEventMarket), receiverLRC(theReceiverLRC), withRegions(theWithRegions)
{
  interaction = theInteraction;
  federate = theFederate;
  regions = theRegions;
  active = theActive;
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::SubscribeInteractionJob::~SubscribeInteractionJob(void)
{
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::JobStatus GERTICO::SubscribeInteractionJob::execute(void)
{

  try
  {
    if (withRegions)
    {
      receiverLRC.federateDB->declarationManagementLRC->subscribeInteractionClass(interaction, active);
    }
    else
    {
//      receiverLRC.federateDB->declarationManagementLRC();
    }
  }
  catch(...)
  {
  }

  return GERTICO::done;
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::SubscribeObjectClassJob::SubscribeObjectClassJob(const GeRtiFactory::GeRtiHandle &theObjectClass, const bool &theActive, GERTICO::HandleSetMap &theAttRegMap, const GeRtiFactory::GeRtiHandle &theFederate, GERTICO::EventMarket &theEventMarket, GERTICO::ReceiverLRC &theReceiverLRC) : eventMarket(theEventMarket), receiverLRC(theReceiverLRC)
{
  attRegMap = theAttRegMap;
  objectClass = theObjectClass;
  federate = theFederate;
  active = theActive;
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::SubscribeObjectClassJob::~SubscribeObjectClassJob(void)
{
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::JobStatus GERTICO::SubscribeObjectClassJob::execute(void)
{
  try
  {
    receiverLRC.federateDB->declarationManagementLRC->subscribeObjectClassAttributesReceiver(objectClass, attRegMap);
  }
  catch(...)
  {
  }

  return GERTICO::done;
}

// ---------------------------------------------------------------------------
// Implementation skeleton constructor
// ---------------------------------------------------------------------------
GERTICO::GeRtiFactory_GeRtiRestore_i::GeRtiFactory_GeRtiRestore_i(PortableServer::POA_ptr thePOA, GERTICO::EventMarket &theEventMarket, GERTICO::ReceiverLRC &theReceiverLRC, GERTICO::HandleSet &theInteractionHandleSet) : eventMarket(theEventMarket), interactionHandleSet(theInteractionHandleSet), receiverLRC (theReceiverLRC)
{
  parser = NULL;
  myPOA = PortableServer::POA::_duplicate(thePOA);
}

// ---------------------------------------------------------------------------
// Implementation skeleton destructor
// ---------------------------------------------------------------------------
GERTICO::GeRtiFactory_GeRtiRestore_i::~GeRtiFactory_GeRtiRestore_i (void)
{
  if (parser)
  {
    delete parser;
  }
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
PortableServer::POA_ptr GERTICO::GeRtiFactory_GeRtiRestore_i::_default_POA (void)
{
  return PortableServer::POA::_duplicate(myPOA);
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::setTimeService(GERTICO::TimeManagementLRC *theTimeManagementLRC)
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "setTimeService", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  timeManagementLRC = theTimeManagementLRC;
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "setTimeService", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::resetLRC(void)
  throw (
    CORBA::SystemException
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "resetLRC", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  eventMarket.clear();
  interactionHandleSet.clear();
  receiverLRC.federateDB->runTimeObjectDB->clear();
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "resetLRC", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::mapIt (GERTICO::HandleSet &out, const GeRtiFactory::Handles &inAttributes)
{
  CORBA::ULong i;
  CORBA::ULong len;

  len = inAttributes.length ();
  for (i = 0; i < len; i++)
  {
    out.insert (inAttributes[i]);
  }
}


// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::setLRCFederate (
    GeRtiFactory::GeRtiHandle theFederateId
  )
  throw (
    CORBA::SystemException
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "setLRCFederate", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  federateId = theFederateId;
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "setLRCFederate", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::publishInteractionClass (
    GeRtiFactory::GeRtiHandle theInteraction)
  throw (
    CORBA::SystemException,
    GeRtiFactory::InteractionClassNotDefined,
    GeRtiFactory::RTIinternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              unsigned long ul;

                              ul = theInteraction;
                              sprintf(galMsg,"publishInteractionClass(interaction=%lu)", ul);
                              E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  // Have a primitive management of published interations
  interactionHandleSet.insert(theInteraction);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "publishInteractionClass", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::publishObjectClass (
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::Handles & attributeList
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RTIinternalError
  )
{
  GERTICO::HandleSet attributeSet;
  mapIt(attributeSet, attributeList);

                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              unsigned long ul;

                              ul = theClass;
                              sprintf(galMsg,"publishObjectClass(class=%lu)", ul);
                              E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, attributeList);
                              E2(GeRti_FM_d, "publishObjectClass", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  receiverLRC.federateDB->runTimeObjectDB->publishObjectClass(federateId, theClass, attributeSet);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "publishObjectClass", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::subscribeInteractionClass (
    GeRtiFactory::GeRtiHandle theClass,
    CORBA::Boolean active
  )
  throw (
    GeRtiFactory::InteractionClassNotDefined,
    GeRtiFactory::RTIinternalError)
{
  GERTICO::HandleSet regions;
  bool b;

  if (active)
  {
    b = true;
  }
  else
  {
    b = false;
  }

                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              unsigned long ul;

                              ul = theClass;
                              if (active)
                              {
                                sprintf(galMsg,"subscribeInteractionClass(class=%lu,active=true)", ul);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                              else
                              {
                                sprintf(galMsg,"subscribeInteractionClass(class=%lu,active=false)", ul);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                            }
                           #endif   // inserted by Gal converter

  regions.insert(0);
  SubscribeInteractionJob *newSubscribeInteractionJob = new SubscribeInteractionJob(theClass, b, regions, federateId, eventMarket, false, receiverLRC);

  receiverLRC.restoreJobs.add(newSubscribeInteractionJob);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "subscribeInteractionClass", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::subscribeInteractionClassWithRegion (
    GeRtiFactory::GeRtiHandle theClass,
    CORBA::Boolean active,
    GeRtiFactory::GeRtiHandle theRegion
  )
  throw (
    GeRtiFactory::InteractionClassNotDefined,
    GeRtiFactory::RegionNotKnown,
    GeRtiFactory::RTIinternalError)
{
  GERTICO::HandleSet regions;
  bool b;

                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              unsigned long ul;
                              unsigned long ul1;

                              ul = theClass;
                              ul1 = theRegion;
                              if (active)
                              {
                                sprintf(galMsg,"subscribeInteractionClassWithRegion(class=%lu,active=true,region=%lu)", ul, ul1);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                              else
                              {
                                sprintf(galMsg,"subscribeInteractionClassWithRegion(class=%lu,active=false,region=%lu)", ul, ul1);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                            }
                           #endif   // inserted by Gal converter

  if (active)
  {
    b = true;
  }
  else
  {
    b = false;
  }

  regions.insert(theRegion);
  SubscribeInteractionJob *newSubscribeInteractionJob = new SubscribeInteractionJob(theClass, b, regions, federateId, eventMarket, true, receiverLRC);

  receiverLRC.restoreJobs.add(newSubscribeInteractionJob);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "subscribeInteractionClassWithRegion", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::subscribeObjectClassAttributes (
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::Handles & attributeList,
    CORBA::Boolean active
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RTIinternalError
  )
{
  CORBA::ULong i;
  CORBA::ULong len;
  GERTICO::HandleSet regions;
  GERTICO::HandleSetMap attRegMap;
  bool b;

                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              unsigned long ul;

                              ul = theClass;
                              if (active)
                              {
                                sprintf(galMsg,"subscribeObjectClassAttributes(class=%lu,active=true)", ul);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                              else
                              {
                                sprintf(galMsg,"subscribeObjectClassAttributes(class=%lu,active=false)", ul);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, attributeList);
                              E2(GeRti_FM_d, "subscribeObjectClassAttributes", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  if (active)
  {
    b = true;
  }
  else
  {
    b = false;
  }

  regions.insert(0);
  len = attributeList.length();
  for (i = 0; i < len; i++)
  {
    attRegMap[attributeList[i]] = regions;
  }

  SubscribeObjectClassJob *newSubscribeObjectClassJob = new SubscribeObjectClassJob(theClass, b, attRegMap, federateId, eventMarket, receiverLRC);

  receiverLRC.restoreJobs.add(newSubscribeObjectClassJob);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "subscribeObjectClassAttributes", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::subscribeObjectClassAttributesWithRegion (
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::Handles & attributeList,
    CORBA::Boolean active,
    GeRtiFactory::GeRtiHandle theRegion
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RegionNotKnown,
    GeRtiFactory::InvalidRegionContext,
    GeRtiFactory::RTIinternalError
  )
{
  CORBA::ULong i;
  CORBA::ULong len;
  GERTICO::HandleSet regions;
  GERTICO::HandleSetMap attRegMap;
  bool b;

                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              unsigned long ul;
                              unsigned long ul1;

                              ul = theClass;
                              ul1 = theRegion;
                              if (active)
                              {
                                sprintf(galMsg,"subscribeObjectClassAttributesWithRegion(class=%lu,active=true,region=%lu)", ul, ul1);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                              else
                              {
                                sprintf(galMsg,"subscribeObjectClassAttributesWithRegion(class=%lu,active=false,region=%lu)", ul, ul1);
                                E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                              }
                              GERTICO::Mapper::printGeRtiFactoryHandles("attributes=", galMsg, attributeList);
                              E2(GeRti_FM_d, "subscribeObjectClassAttributesWithRegion", galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  if (active)
  {
    b = true;
  }
  else
  {
    b = false;
  }

  regions.insert(theRegion);
  len = attributeList.length();
  for (i = 0; i < len; i++)
  {
    attRegMap[attributeList[i]] = regions;
  }

  SubscribeObjectClassJob *newSubscribeObjectClassJob = new SubscribeObjectClassJob(theClass, b, attRegMap, federateId, eventMarket, receiverLRC);

  receiverLRC.restoreJobs.add(newSubscribeObjectClassJob);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "subscribeObjectClassAttributesWithRegion", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::loadObject (
    GeRtiFactory::GeRtiHandle theObjectId,
    const CORBA::WChar *theObjectName,
    GeRtiFactory::GeRtiHandle theClass,
    const GeRtiFactory::AttributesData &theAttributesData
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::ObjectClassNotDefined,
    GeRtiFactory::AttributeNotDefined,
    GeRtiFactory::RegionNotKnown,
    GeRtiFactory::InvalidRegionContext,
    GeRtiFactory::RTIinternalError
  )
{
  AttInfo attInfo;
  AttInfoMap attInfoMap;
  CORBA::ULong i;
  CORBA::ULong j;
  CORBA::ULong len;
  CORBA::ULong lenj;
  std::wstring objectName;

                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
                              unsigned long ul;
                              unsigned long ul1;

                              ul = theObjectId;
                              ul1 = theClass;
                              sprintf(galMsg,"loadObject(objectId=%lu,name=%ls,class=%lu)", ul, theObjectName, ul1);
                              E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter

  GERTICO::Mapper::mapWstringFromWchar(objectName, theObjectName);
  len = theAttributesData.length ();
  for (i = 0; i < len; i++)
  {
    attInfo.federate = theAttributesData[i].theFederate;
 // XXX   attInfo.acquiringFederate = theAttributesData[i].theAcquiringFederate;
    lenj = theAttributesData[i].theRegions.length();
    for (j = 0; j < lenj; j++)
    {
      attInfo.regions.insert(theAttributesData[i].theRegions[j]);
    }
    attInfo.setStatus(theAttributesData[i].theStatus);
    attInfo.orderType = theAttributesData[i].theOrderType;
    attInfo.transportationType = theAttributesData[i].theTransportationType;
    attInfoMap[theAttributesData[i].theId] = attInfo;
  }

  receiverLRC.federateDB->objectManagementLRC->loadObjectAttInfoMap (theObjectId, objectName, theClass, attInfoMap);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "loadObject", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::loadRegion (
      GeRtiFactory::GeRtiHandle theSpace,
      GeRtiFactory::GeRtiHandle theRegion,
      const GeRtiFactory::Extents & theExtents
  )
  throw (
    CORBA::SystemException,
    GeRtiFactory::RTIinternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_FM_d)
                            {
#ifndef IEEE_1516
                              unsigned long ul;
#endif
                              unsigned long ul1;

                              ul1 = theRegion;
#ifdef IEEE_1516
                              sprintf(galMsg,"loadRegion(active=true,region=%lu,Extents=)", ul1);
                              E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
#else
                              ul = theSpace;
                              sprintf(galMsg,"loadRegion(space=%lu,active=false,region=%lu,Extents=)", ul, ul1);
                              E1mEnd(GeRti_FM_d, galMsg);   // inserted by Gal converter
#endif
                            }
                           #endif   // inserted by Gal converter

  receiverLRC.federateDB->dataDistributionManagementLRC->loadRegion(theSpace, theRegion, theExtents);

                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "loadRegion", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::initializeParser(void)
{
  // check if allready initialized
  if (parser != NULL)
  {
    return;
  }

  // Initialize the XML4C system
  try
  {
    XMLPlatformUtils::Initialize();
  }

  catch (const XMLException &)
  {
//    std::cerr << "Error during initialization! :\n"
//         << StrX(toCatch.getMessage()) << std::endl;
  }

  // Instantiate the DOM parser.
  parser = new XercesDOMParser;
  parser->setValidationScheme(XercesDOMParser::Val_Auto);

  // And create our error handler and install it
  parser->setErrorHandler(HLAparseErrorHandler::getErrorHandler());
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiFactory_GeRtiRestore_i::loadLRC(
    const char * restoreData
  )
  throw(
    CORBA::SystemException,
    GeRtiFactory::RTIinternalError
  )
{
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "loadLRC", "Enter");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
  DOMDocument *doc;
  DOMElement *domElement;
  XMLByte *tempByte;
  unsigned long ul = strlen(restoreData) + 1;

  tempByte = new XMLByte[ul];
  memcpy(tempByte, restoreData, ul);
  MemBufInputSource *memBufInputSource = new MemBufInputSource(tempByte, ul, "fred");

  initializeParser();
  parser->parse(*memBufInputSource);
  doc = parser->getDocument();
  if (doc != 0)
  {
    domElement = doc->getDocumentElement();
    if (domElement != 0)
    {
      DOMNode* child = domElement->getFirstChild();

      // Restore using XML data.
      while (child != 0)
      {
        if (child->getNodeType() == DOMNode::ELEMENT_NODE)
        {
          if (XMLString::compareString(child->getNodeName(),XMLString::transcode(federationTimeStr.c_str())) == 0)
          {
            timeManagementLRC->restore(*((DOMElement*)child));
          }
        }
        child = child->getNextSibling();
      }

      receiverLRC.restore(*domElement);
    }
    else
    {
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_e, "loadLRC", "ERROR");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
    }
  }

  delete []tempByte;
                           #ifdef GalDebug   // inserted by Gal converter
                             E2(GeRti_FM_d, "loadLRC", "Leave");   // inserted by Gal converter
                           #endif   // inserted by Gal converter
}
