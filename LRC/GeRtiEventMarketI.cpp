/*******************************************************************************
**
** Copyright (c) Fraunhofer IITB
** All rights reserved.
**
** GeRtiEventMarketI.cpp
**
*******************************************************************************/


/* -*- C++ -*- $Id: GeRtiEventMarketI.cpp,v 1.51 2010/05/17 08:07:23 mul Exp $ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#include "idl/GeRtiFactoryS.h"
#include "GeRtiEventMarketI.h"
#include "Util/GeRtiOrb.h"

/********************************** Gal begin ***************************************/

#ifdef GalDebug

#include "Gal/StdAfx.h"
#include "Gal/repository.h"
#include "Gal/event.h"

static class Repository_l *r=(Repository::getSingleInstance())->getRepository_l("GeRtiEC.res","GeRtiEC");

static class Event *GeRti_EC_d=r->getRefEvent("GeRti_EC_d");
static class Event *GeRti_EC_e=r->getRefEvent("GeRti_EC_e");
static class Event *GeRti_EC_i=r->getRefEvent("GeRti_EC_i");
static class Event *GeRti_EC_w=r->getRefEvent("GeRti_EC_w");

#define MAX_TXT 2048
static char galMsg[MAX_TXT];

#endif
/********************************** Gal end ***************************************/

// ---------------------------------------------------------------------------
// Implementation skeleton constructor
// ---------------------------------------------------------------------------
GERTICO::GeRtiEventMarket_PushConsumer_i::GeRtiEventMarket_PushConsumer_i(PortableServer::POA_ptr thePOA, GERTICO::ReceiverLRC &theReceiverLRC, GERTICO::GeRtiFedTimeFactory &theGeRtiFedTimeFactory) : geRtiFedTimeFactory(theGeRtiFedTimeFactory), receiverLRC(theReceiverLRC)
{
  myPOA = PortableServer::POA::_duplicate(thePOA);
}

// ---------------------------------------------------------------------------
// Implementation skeleton destructor
// ---------------------------------------------------------------------------
GERTICO::GeRtiEventMarket_PushConsumer_i::~GeRtiEventMarket_PushConsumer_i (void)
{
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
PortableServer::POA_ptr GERTICO::GeRtiEventMarket_PushConsumer_i::_default_POA (void)
{
  return PortableServer::POA::_duplicate(myPOA);
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiEventMarket_PushConsumer_i::push
(
  const GeRtiFactory::GertiPushEvent &gertiPushEvent
)
throw
(
  CORBA::SystemException
)
{
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_EC_d)
                            {
                              CORBA::Long d;
                              CORBA::ULong len;
                              char buf[1024];
                              unsigned int ind;
                              unsigned int indItem;
                              unsigned long lenItems;
                              unsigned long ul;
                              unsigned long ul1;
                              unsigned long ul2;
                              unsigned long ul3;


                              len = gertiPushEvent.e.length();
                              for (ind = 0; ind < len; ind++)
                              {
                                d = gertiPushEvent.e[ind]._d();
                                sprintf(galMsg, "EventType=%lu", d);
                                E2(GeRti_EC_d, "PushConsumer_i::push", galMsg);   // inserted by Gal converter
                                switch(d)
                                {
                                  case 0:
	                                {
                                    const GeRtiFactory::GeRtiEvent &ev = gertiPushEvent.e[ind].e();
                                    ul3 = len;
                                    sprintf(galMsg, "numberOfEvents=%lu", ul3);
                                    E2(GeRti_EC_d, "PushConsumer_i::push", galMsg);   // inserted by Gal converter
                                    ul = gertiPushEvent.e[ind].e().source;
                                    ul1 = gertiPushEvent.e[ind].e()._cxx_class;
                                    ul2 = gertiPushEvent.e[ind].e().obj;
                                    if (gertiPushEvent.e[ind].e().type == GeRtiFactory::obj)
                                    {
                                      sprintf(galMsg, "source=%lu,class=%lu,object=%lu,update", ul, ul1, ul2);
                                    }
                                    else
                                    {
                                      sprintf(galMsg, "source=%lu,class=%lu,interaction", ul, ul1);
                                    }
                                    E2(GeRti_EC_d, "PushConsumer_i::push", galMsg);   // inserted by Gal converter
                                    if (gertiPushEvent.e[ind].e().timestamp.length())
                                    {
                                      std::auto_ptr<GERTICO::GeRtiFedTime> fedTime;
                                      GERTICO::ConvertTime::mapGeRtiFedTimeAutoPtr(geRtiFedTimeFactory, fedTime, gertiPushEvent.e[ind].e().timestamp);
                                      fedTime->getPrintableString(buf);
                                      E2(GeRti_EC_d, "PushConsumer_i::time", buf);   // inserted by Gal converter
                                    }
                                    lenItems = gertiPushEvent.e[ind].e().data.length();
                                    for (indItem = 0; indItem < lenItems; indItem++)
                                    {
                                      GERTICO::Mapper::printAttributeHandleValue("pushData=", galMsg, gertiPushEvent.e[ind].e().data[indItem]);
                                      E2(GeRti_EC_d, "PushConsumer_i::push", galMsg);   // inserted by Gal converter
                                    }
                                    break;
                                  }
                                  default:
                                  {
                                    break;
                                  }
	                              }
                              }
                            }
                           #endif   // inserted by Gal converter

  receiverLRC.addEventHolder(gertiPushEvent);
                           #ifdef GalDebug   // inserted by Gal converter
                            E1mBegin(GeRti_EC_d)
                            {
                             E2(GeRti_EC_d, "PushConsumer_ipush", "Leave");   // inserted by Gal converter
                            }
                           #endif   // inserted by Gal converter
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
void GERTICO::GeRtiEventMarket_PushConsumer_i::disconnect_push_consumer (
)
throw
(
  CORBA::SystemException
)

{
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::cPushConsumer::cPushConsumer(PortableServer::POA_ptr thePOA, GERTICO::ReceiverLRC &theReceiverLRC, GERTICO::GeRtiFedTimeFactory &theGeRtiFedTimeFactory) : geRtiFedTimeFactory(theGeRtiFedTimeFactory)
{
  myPOA = PortableServer::POA::_duplicate(thePOA);
  pushConsumer = new GERTICO::GeRtiEventMarket_PushConsumer_i(myPOA, theReceiverLRC, geRtiFedTimeFactory);
  pConsumer = pushConsumer->_this ();
}

// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
GERTICO::cPushConsumer::~cPushConsumer ()
{
  PortableServer::ObjectId_var objectId = myPOA->servant_to_id(pushConsumer);
  myPOA->deactivate_object(objectId.in());
// Does not work!
  delete pushConsumer;
}

